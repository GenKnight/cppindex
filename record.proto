package indexer.proto;

////////////////////////////////////////////////////////////

message Digests {
  message Digest {
    optional string filename = 1;
    optional string md5 = 2;  // 32-byte hex string
  }
  repeated Digest digests = 1;
}

////////////////////////////////////////////////////////////

message CompilationUnit
{
  optional string main_file = 1;
  // defined functions
  repeated Function functions = 2;
  //repeated string
}

message Functions {
  optional string filename = 1;
  repeated Function functions = 2;
}

////////////////////////////////////////////////////////////

enum Linkage {
  kNoLinkage = 0;
  kInternalLinkage = 1;
  kUniqueExternalLinkage = 2; 
  kVisibleNoLinkage = 3;
  kExternalLinkage = 4;
}

enum StorageClass {
  kNone = 0;
  kExtern = 1;
  kStatic = 2;
}

enum Usage {
  kUnknown = 0;
  kDeclare = 1;
  kDefine = 2;
  kUse = 3;
}

message Function {
  optional string name = 1;
  optional string mangled = 2;
  optional string signature = 3;
  optional Range name_range = 4;
  optional bool macro = 5;
  optional Usage usage = 6;
  optional StorageClass storage_class = 7;
  // optional Linkage linkage = X;

  // when usage != kDefine, ref_file and ref_lineno are usually defined, except for __builtin_memcpy etc.
  repeated string ref_file = 8;
  repeated int32 ref_lineno = 9;
}

////////////////////////////////////////////////////////////

message Preprocess {
  optional string filename = 1;
  repeated Inclusion includes = 2;
  repeated Macro macros = 3;
  // repeated Declarator declarators = 4;
}

message Inclusion {
  optional string included_file = 1;  // path of included file
  optional int32 lineno = 2 [default = -1]; // 1-based
  optional Range range = 3;  // range of file name in #include directive
  optional bool macro = 4 [default = false];  // include using macro
  optional bool changed = 5 [default = false]; // include a macro which changes
}

message Macro {
  optional string name = 1;
  optional Range range = 2;  // range of the macro name token
  optional bool define = 3 [default = false];
  optional bool reference = 4 [default = false];

  // when reference == true, ref_file and ref_lineno are usually defined, except for __has_feature etc.
  optional string ref_file = 5;
  optional int32 ref_lineno = 6 [default = -1];
}

message Declarator {
  enum Type {
    COMMENT = 1;
    STRING = 2;
    NUMBER = 3;
    SKIPPED = 4;
  }
  optional Type type = 1;
  optional Range range = 2;
}

////////////////////////////////////////////////////////////

message Range {
  optional string filename = 1;
  optional Location begin = 2;
  optional Location end = 3;
  optional bool anchor = 4;
}

message Location
{
  optional int32 offset = 1 [default = -1];
  optional int32 lineno = 2 [default = -1]; // 1-based
  optional int32 column = 3 [default = -1];
}
